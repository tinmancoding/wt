/**
 * Shell integration utilities for WT
 * Provides shell wrapper function generation for different shells
 */

export type SupportedShell = 'bash' | 'zsh' | 'fish';

/**
 * Detects the current shell from environment variables
 */
export function detectShell(): SupportedShell | null {
  const shell = process.env.SHELL;
  
  if (!shell) {
    return null;
  }
  
  const shellName = shell.split('/').pop()?.toLowerCase();
  
  switch (shellName) {
    case 'bash':
      return 'bash';
    case 'zsh':
      return 'zsh';
    case 'fish':
      return 'fish';
    default:
      return null;
  }
}

/**
 * Generates shell wrapper functions for the specified shell
 */
export function generateShellWrapper(shell: SupportedShell, wtBinaryPath: string = 'wt'): string {
  switch (shell) {
    case 'bash':
    case 'zsh':
      return generateBashZshWrapper(wtBinaryPath);
    case 'fish':
      return generateFishWrapper(wtBinaryPath);
    default:
      throw new Error(`Unsupported shell: ${shell}`);
  }
}

/**
 * Generates wrapper functions for bash and zsh (similar syntax)
 */
function generateBashZshWrapper(wtBinaryPath: string): string {
  // Using template strings with proper escaping for shell variables
  const dollar = '$';
  return `# WT shell integration wrapper functions
# Generated by wt setup

wt() {
  local cmd="${dollar}1"
  
  # Handle switch and sw commands with directory changing
  if [[ "${dollar}cmd" == "switch" || "${dollar}cmd" == "sw" ]]; then
    shift  # Remove the command from arguments
    local target_dir
    target_dir=${dollar}(command "${wtBinaryPath}" print-dir "${dollar}@" 2>/dev/null)
    
    if [[ ${dollar}? -eq 0 && -n "${dollar}target_dir" && -d "${dollar}target_dir" ]]; then
      cd "${dollar}target_dir" || return 1
    else
      echo "Error: Could not switch to worktree" >&2
      return 1
    fi
  else
    # For all other commands, pass through to the actual wt binary
    command "${wtBinaryPath}" "${dollar}@"
  fi
}

# Ultra-short convenience alias
wts() {
  wt switch "${dollar}@"
}`;
}

/**
 * Generates wrapper functions for fish shell
 */
function generateFishWrapper(wtBinaryPath: string): string {
  // Using template strings with proper escaping for shell variables
  const dollar = '$';
  return `# WT shell integration wrapper functions for fish
# Generated by wt setup

function wt
    set cmd ${dollar}argv[1]
    
    # Handle switch and sw commands with directory changing
    if test "${dollar}cmd" = "switch"; or test "${dollar}cmd" = "sw"
        set -e argv[1]  # Remove the command from arguments
        set target_dir (command ${wtBinaryPath} print-dir ${dollar}argv 2>/dev/null)
        
        if test ${dollar}status -eq 0; and test -n "${dollar}target_dir"; and test -d "${dollar}target_dir"
            cd "${dollar}target_dir"
        else
            echo "Error: Could not switch to worktree" >&2
            return 1
        end
    else
        # For all other commands, pass through to the actual wt binary
        command ${wtBinaryPath} ${dollar}argv
    end
end

# Ultra-short convenience alias
function wts
    wt switch ${dollar}argv
end`;
}

/**
 * Gets shell-specific setup instructions
 */
export function getShellSetupInstructions(shell: SupportedShell): string {
  switch (shell) {
    case 'bash':
      return `# Add this line to your ~/.bashrc:
source <(wt setup --bash)`;
    case 'zsh':
      return `# Add this line to your ~/.zshrc:
source <(wt setup --zsh)`;
    case 'fish':
      return `# Add this line to your ~/.config/fish/config.fish:
wt setup --fish | source`;
    default:
      throw new Error(`Unsupported shell: ${shell}`);
  }
}